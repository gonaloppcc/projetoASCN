- name: Get MySQL Pod
  k8s_info:
    kind: Pod
    namespace: "{{ k8s_namespace }}"
    label_selectors:
      - app=mysql
  register: mysql_pod

- name: Get MySQL Pod Name
  set_fact:
    mysql_pod_name: '{{ mysql_pod.resources[0].metadata.name }}'

- name: Get Password hash
  shell: "python3 -c 'import bcrypt; print(bcrypt.hashpw(b\"{{ first_blog_admin.password }}\", bcrypt.gensalt(rounds=10)).decode(\"ascii\"))'"
  register: password_hash

- name: Fix Password hash
  set_fact:
    password_hash: '{{ password_hash.stdout | replace("$", "\$") }}'

- name: Waiting for migrations to run
  pause:
    seconds: 30

- name: Add Blog Admin to MySQL Database
  kubernetes.core.k8s_exec:
    namespace: "{{ k8s_namespace }}"
    pod: "{{ mysql_pod_name }}"
    command: "mysql -u {{ app_db_user }} -p{{ app_db_password }} -e \"UPDATE {{ app_db_name }}.users set name='{{ first_blog_admin.name }}', password='{{ password_hash }}', email='{{ first_blog_admin.email }}', status='active' where id=1;\""
  register: mysql_update
  until: "mysql_update is not failed"
  retries: 10
  delay: 10

- name: Print the error output and stop the execution of the playbook
  debug:
    var: mysql_update
  when: mysql_update.failed
  failed_when: True

- name: Get users table
  kubernetes.core.k8s_exec:
    namespace: "{{ k8s_namespace }}"
    pod: "{{ mysql_pod_name }}"
    command: "mysql -Ns -u {{ app_db_user }} -p{{ app_db_password }} -e \"SELECT * FROM {{ app_db_name }}.users where id=1;\""
  register: users_table

- name: Print Users table
  debug:
    msg: "{{ users_table.stdout }}"


- name: Verify that Blog Admin is updated
  assert:
    that:
      users_table.stdout_lines[0] is regex("1.*{{ first_blog_admin.name }}.*{{ password_hash }}.*{{ first_blog_admin.email }}.*active")

